### Workspace-wide configuration ###

[workspace]
members = ["asylum", "clang-time-trace", "cmakeperf", "cpparser", "simpp"]

[workspace.package]
version = "3.0.2"
edition = "2021"
repository = "https://github.com/HadrienG2/crofiler"
rust-version = "1.74.0"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.14.1"
# CI backends to support
ci = "github"
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu"]
# The installers to generate for each app
installers = ["shell"]
# Publish jobs to run in CI
pr-run-mode = "plan"
# Whether to install an updater program
install-updater = false

# Config for "cargo release"
[workspace.metadata.release]
# Not ready to publish to crates.io yet
publish = false
# Everything shared a single version number
shared-version = true
tag-name = "v{{version}}"

[workspace.dependencies]
ahash = "0.8"
assert_matches = "1.5"
atomic-wait = "1.1"
clap = "=4.4"
cpp_demangle = "0.4"
criterion = { version = "0.5", default-features = false }
crossbeam-deque = "0.8"
crossbeam-utils = "0.8"
csv = "1.1"
cursive = { version = "0.21", default-features = false }
cursive_table_view = "0.15"
decorum = "0.3"
env_logger = "0.11"
fs-set-times = "0.20"
hashbrown = "0.14"
lasso = "0.7"
log = "0.4"
maplit = "1.0"
more-asserts = "0.3"
nom = "7.1"
nom-supreme = "0.8"
pathdiff = "0.2"
phf = "0.11"
pretty_assertions = "1.4"
proptest = "1.5"
proptest-derive = "0.5"
reffers = "0.7"
regex = "1.10"
serde = "1.0"
serde_json = "1.0"
shlex = "1.3"
simplelog = "0.12"
strum = "0.26"
sysinfo = { version = "0.31", default-features = false }
syslog = "7.0"
tempfile = "3.13"
termion = "4.0"
termtree = "0.4"
thiserror = "1.0"
time = "0.3"
unicode-segmentation = "1.12"
unicode-width = "0.1"
unicode-xid = "0.2"
wait-timeout = "0.2"

[profile.test]
opt-level = 1

[profile.test.package.proptest]
opt-level = 3

[profile.test.package.rand_chacha]
opt-level = 3

[profile.release]
debug = "line-tables-only"  # Needed for profiling

[profile.bench]
debug = "line-tables-only"  # Needed for profiling
codegen-units = 1  # Needed for inlining decision determinism

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

### Crofiler-specific configuration ###

[package]
name = "crofiler"
version.workspace = true
edition.workspace = true
repository.workspace = true
rust-version.workspace = true

[features]
# Display statistics on the usage of the C++ entity interners
#
# This can be used during development to adjust interner key sizes based on
# real-world workloads.
#
unstable_interner_stats = []

[dependencies]
# Used to decode clang output
clang-time-trace = { path = "clang-time-trace" }

# Used for CLI options
clap = { workspace = true, features = ["derive", "wrap_help"] }

# Used to measure and process full-build profiles
cmakeperf = { path = "cmakeperf" }

# Used for TUI display
cursive = { workspace = true, features = ["termion-backend"] }
cursive_table_view = { workspace = true }

# Saner floats, used to simplify TUI code
decorum = { workspace = true }

# Used for logging in stdio mode
env_logger = { workspace = true }

# Used for logging
log = { workspace = true }

# Used to parse versions
regex = { workspace = true }

# Used for logging in TUI mode
syslog = { workspace = true }

# Used for low-level terminal interaction, mostly TTY detection & teminal size
termion = { workspace = true }

# Used for typesetting hierarchical profiles in stdio mode
termtree = { workspace = true }

# Used to simplify error handling
thiserror = { workspace = true }

# Used to format ISO dates from clang Unix timestamps
time = { workspace = true }

# Used to find appropriate points for cutting Unicode strings
unicode-segmentation = { workspace = true }

# Used to evaluate terminal width of strings
unicode-width = { workspace = true }

# Used for cancellable wait on worker processes
wait-timeout = { workspace = true }

[dev-dependencies]
# Used to simplify tests
assert_matches = { workspace = true }
